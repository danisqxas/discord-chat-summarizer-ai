"""Serverless entrypoint for the Discord Chat Summarizer API.

This module exposes a ``handler`` function compatible with many serverless
platforms (including Vercel, AWS Lambda and others). It handles two kinds
of requests:

* **GET** requests return a simple health check message.
* **POST** requests expect a JSON body with a ``messages`` field
  containing a list of chat strings. The function returns a summary
  generated by the local summariser.

To deploy this function on a platform other than Vercel, adjust the
surrounding configuration (e.g. remove ``vercel.json``) but the function
signature can remain the same.
"""

import json
from typing import Any, Dict

from src import api as summarizer_api


def _build_response(status_code: int, body: Dict[str, Any]) -> Dict[str, Any]:
    """Helper to construct a response dictionary.

    Parameters
    ----------
    status_code : int
        The HTTP status code to return.
    body : dict
        The body of the response. It will be serialised to JSON.

    Returns
    -------
    dict
        A dictionary representing the response expected by the serverless
        runtime.
    """
    return {
        "statusCode": status_code,
        "headers": {"Content-Type": "application/json"},
        "body": json.dumps(body),
    }


def handler(request: Dict[str, Any]) -> Dict[str, Any]:
    """Entry point for HTTP requests.

    Parameters
    ----------
    request : dict
        A dictionary representing the incoming HTTP request. It should
        contain at least ``httpMethod`` and optionally ``body``. When
        deployed on Vercel this matches the event object passed to
        serverless functions.

    Returns
    -------
    dict
        A dictionary representing the HTTP response.
    """
    method = request.get("httpMethod", request.get("method", "GET")).upper()
    if method != "POST":
        # Any nonâ€‘POST request returns a simple health message
        return _build_response(200, {"message": "Discord Chat Summarizer API is running"})

    # Parse the request body
    try:
        raw_body = request.get("body", "{}") or "{}"
        payload = json.loads(raw_body) if isinstance(raw_body, str) else raw_body
    except json.JSONDecodeError:
        return _build_response(400, {"error": "Invalid JSON in request body."})

    messages = payload.get("messages")
    if not isinstance(messages, list) or not all(isinstance(m, str) for m in messages):
        return _build_response(400, {"error": "'messages' must be a list of strings."})

    # Generate summary using the local API wrapper
    try:
        summary = summarizer_api.fetch_summary(None, messages)
        return _build_response(200, {"summary": summary})
    except Exception as exc:  # pragma: no cover - catch unexpected failures
        return _build_response(500, {"error": f"Failed to generate summary: {exc}"})
